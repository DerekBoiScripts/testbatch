Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName PresentationCore,PresentationFramework



# Import the necessary namespaces and functions
Add-Type -TypeDefinition @"
    using System;
    using System.Runtime.InteropServices;
    public class User32 {
        [DllImport("user32.dll")]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    }
"@

# Get a handle to the console window
$consolePtr = [System.Diagnostics.Process]::GetCurrentProcess().MainWindowHandle

# Hide the console window
[User32]::ShowWindow($consolePtr, 0)




Add-Type -AssemblyName System.Windows.Forms


# Load the necessary .NET assemblies
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName PresentationCore,PresentationFramework

# Enable visual styles for Windows Forms controls
[Windows.Forms.Application]::EnableVisualStyles()




















# Function to check if the user is running as an administrator
function IsAdmin {
    $wid = [System.Security.Principal.WindowsIdentity]::GetCurrent()
    $prp = New-Object System.Security.Principal.WindowsPrincipal($wid)
    return $prp.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Determine if the user has admin privileges
$isAdmin = IsAdmin



# Create controls based on admin status
if ($isAdmin) {
    
    # Admin task - adjust this part as needed
    $adminForm = New-Object System.Windows.Forms.Form
    $adminForm.Text = "Admin Form"
    $adminForm.Size = New-Object System.Drawing.Size(700, 400)
    $adminForm = New-Object System.Windows.Forms.Form
    $adminForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
    $adminForm.Text = 'Selection'
    $adminForm.Topmost = $false
    $adminForm.MinimumSize = New-Object -TypeName System.Drawing.Size -ArgumentList (700, 400)
    $adminForm.MaximumSize = New-Object -TypeName System.Drawing.Size -ArgumentList (700, 400)  
    $adminForm.StartPosition = 'CenterScreen'
    $adminForm.ShowInTaskbar = $false
    $adminForm.MaximizeBox = $false
    $adminForm.MinimizeBox = $false
    $adminForm.Font = New-Object System.Drawing.Font("Times New Roman", 8, [System.Drawing.FontStyle]::Regular)
$base64ImageString = ""
    # Load the image
    $imageBytes = [Convert]::FromBase64String($base64ImageString)
    $ms = New-Object IO.MemoryStream($imageBytes, 0, $imageBytes.Length)
    $ms.Write($imageBytes, 0, $imageBytes.Length)
    $alkanelogo = [System.Drawing.Image]::FromStream($ms, $true)

    # Set the background image
    $adminForm.BackgroundImage = $alkanelogo
    $adminForm.BackgroundImageLayout = 'Stretch'
    $adminForm.SuspendLayout()

    $Icon = [System.Drawing.Icon]::ExtractAssociatedIcon("c:\Windows\System32\UserAccountControlSettings.exe")
    $adminForm.Icon = $Icon

    # Create a TabControl and add it to the form
    $FormTabControl1 = New-Object System.Windows.Forms.TabControl
    $FormTabControl1.Size = '700, 400'
    $FormTabControl1.Location = '0,0'
    $adminForm.Controls.Add($FormTabControl1)

    # Create a TabPage (Tab1)
    $Tab11 = New-Object System.Windows.Forms.TabPage
    $Tab11.DataBindings.DefaultDataSourceUpdateMode = 0
    $Tab11.UseVisualStyleBackColor = $true
    $Tab11.Name = 'Tab1'
    $Tab11.Text = 'General Use'
    $FormTabControl1.Controls.Add($Tab11)

    # Set the background image for Tab11
    $CurrentTimess1 = Get-Date -format "yyyy-MM-dd HH:mm:ss"
    $Tab11.BackgroundImageLayout = 'None'
    $Tab11.BackgroundImage = $alkanelogo

    # Add the console box to Tab1
    $console1 = New-Object System.Windows.Forms.RichTextBox
    $console1.Location = New-Object System.Drawing.Point(450, 0)
    $console1.Size = New-Object System.Drawing.Size(220, 330)
    $console1.ReadOnly = $true
    $console1.Multiline = $true
    $console1.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
    $console1.ForeColor = [System.Drawing.Color]::Black
    $console1.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Regular)
    $console1.Text = "CURRENT VERSION: $version `n Next Version: 4.0 `n Ignore if you already have $version"
    

    # Add the label to Tab11
    $textboxlabel1 = New-Object System.Windows.Forms.Label
    $textboxlabel1.Text = $CurrentTimess1
    $textboxlabel1.Location = New-Object System.Drawing.Point(10, 10)
    $textboxlabel1.Size = New-Object System.Drawing.Size(100, 45)

 # Add an input textbox to Tab11
 $theTbox1 = New-Object System.Windows.Forms.TextBox
 $theTbox1.Text = 'Enter URL Here/IP'
 $theTbox1.Location = New-Object System.Drawing.Point(0, 50)
 $theTbox1.Size = New-Object System.Drawing.Size(100, 20)
 $Go_button1 = New-Object System.Windows.Forms.Button
 $Go_button1.Text = 'NSLOOKUP Start'
 $nslookup21 = New-Object System.Windows.Forms.ToolTip
 $nslookup11 = "Performs an NSLOOKUP with the IP you provided above"
 $nslookup21.SetToolTip($Go_button1, $nslookup11)
 $Go_button1.add_MouseHover({ $nslookup11 })
 $Go_button1.Location = New-Object -TypeName System.Drawing.Point(0, 80)
 $Go_button1.Size = New-Object -TypeName System.Drawing.Size(110, 30)
 $Go_button1.add_click{ Resolve-DnsName -Name $theTbox.Text | Out-GridView }
 
 # Button for ipconfig
 $ipconf_button1 = New-Object System.Windows.Forms.Button
 $ipconf_button1.Text = 'ipconfig'
 $ipconfigtooltip11 = New-Object System.Windows.Forms.ToolTip
 $ipconfigtooltip1 = "Shows your PC DNS, IPv6, IPv4, subnet, and other information"
 $ipconfigtooltip11.SetToolTip($ipconf_button1, $ipconfigtooltip1)
 $ipconf_button1.add_MouseHover({ $ipconfigtooltip1 })
 $ipconf_button1.Location = New-Object -TypeName System.Drawing.Point(0, 200)
 $ipconf_button1.Size = New-Object -TypeName System.Drawing.Size(110, 30)
 $ipconf_button1.add_click{
     $ipconf_button1.Enabled = $false
     $console1.Text = & "$env:windir\system32\ipconfig.exe" /all | Out-String
     Start-Sleep -Milliseconds 1500
     $ipconf_button1.Enabled = $true
 }
 
 # Button for DisplayDNS
 $tracerts_button1 = New-Object System.Windows.Forms.Button
 $tracerts_button1.Text = 'Display DNS'
 $tracerts_button1.Location = New-Object -TypeName System.Drawing.Point(0, 110)
 $tracerts_button1.Size = New-Object -TypeName System.Drawing.Size(110, 30)
 $tracerts_button1.add_click{
     Get-DnsclientCache | Format-Table -Property Entry, RecordName, RecordStatusType, Section, TimeToLive, DataLength, Data -AutoSize | Out-String
     $P = Get-DnsclientCache
     $P | Out-GridView
 }

  # Button for DisplayDNS
  $ClearDNS = New-Object System.Windows.Forms.Button
  $ClearDNS.Text = 'Clear DNS'
  $ClearDNS.Location = New-Object -TypeName System.Drawing.Point(0, 170)
  $ClearDNS.Size = New-Object -TypeName System.Drawing.Size(110, 30)
  $ClearDNS.add_click{  
    Clear-DnsClientCache
  }

 # Button for TraceRoute
 $tracert_button1 = New-Object System.Windows.Forms.Button
 $tracert_button1.Text = 'TraceRoute'
 $tracert_button1.Location = New-Object -TypeName System.Drawing.Point(0, 140)
 $tracert_button1.Size = New-Object -TypeName System.Drawing.Size(110, 30)
 $tracert_button1.add_click{
     Start-Sleep -Seconds 45
     Test-NetConnection -ComputerName $theTbox1.Text -Traceroute -Hops 2
     Start-Sleep -Seconds 45
 }
 
 
 $tcpipjob1 =
 {
   # Define path to netsh.exe command line tool
   $cleardns = "$env:windir\system32\netsh.exe"
   # Update the console to display a message
   $console1.Text = 'Please wait..'
   # Reset Winsock Catalog
   & $cleardns winsock reset catalog | Out-String
   # Reset IPv4 settings
   & $cleardns interface ipv4 reset| Out-String
   # Reset IPv6 settings
   & $cleardns interface ipv6 reset| Out-String
   # Clear ARP cache
   & "$env:windir\system32\arp.exe" d
   # Reset Winsock
   & $cleardns winsock reset| Out-String
   # Reset TCP/IP settings
   & $cleardns int tcp reset| Out-String
   # Reset IP settings
   & $cleardns int ip reset| Out-String
   # Delete neighbor cache
   & $cleardns int ip delete neighbors| Out-String
   # Delete destination cache
   & $cleardns int ip delete destinationcache| Out-String
   # Delete ARP cache
   & $cleardns int ip delete arpcache| Out-String
   # Flush DNS cache
   & "$env:windir\system32\ipconfig.exe" /flushDNS| Out-String
   # Register DNS
   & "$env:windir\system32\ipconfig.exe" /registerDNS| Out-String
   # Display DNS cache
   & "$env:windir\system32\ipconfig.exe" /displayDNS| Out-String
   # Release IPv6 lease
   & "$env:windir\system32\ipconfig.exe" /release6| Out-String
   # Renew IPv6 lease
   & "$env:windir\system32\ipconfig.exe" /renew6| Out-String
   # Clear NetBIOS cache
   & "$env:windir\system32\nbtstat.exe" -R| Out-String
   # Reload NetBIOS names
   & "$env:windir\system32\nbtstat.exe" -RR| Out-String
   # Update the console to display a message
   $console1.Text = 'Done.'| Out-String
   
   # Display DNS cache and network settings
   $console1.Lines += & "$env:windir\system32\ipconfig.exe" /displaydns | Out-String
   $console1.Lines += & "$env:windir\system32\ipconfig.exe" /all | Out-String
 }
 
 # Create a button to trigger the TCP/IP stack reset
 $tcpipstack_button1 = New-Object System.Windows.Forms.Button
 $tcpipstack_button1.text = 'Clear TCP/IP Stack'
 $tooltip122 = New-Object System.Windows.Forms.ToolTip
 $tipMigrate222 = "Have network issues? click this button and wait till its done, then restart your PC"
 $tooltip122.SetToolTip($tcpipstack_button1, $tipMigrate222)
 $tcpipstack_button1.add_MouseHover({ $tooltip122 })
 $tcpipstack_button1.location = New-Object -TypeName System.Drawing.Point (120,140) 
 $tcpipstack_button1.size = New-Object -TypeName System.Drawing.Size (110,30)
 
 # When the button is clicked, start the TCP/IP stack reset job and update the console
 $tcpipstack_button1.add_click{
 
   $console1.text = "starting..."
   
   $tcpipstack_button1.Enabled = $false  # Disable the button
   $jobby1 = Start-Job -ScriptBlock $tcpipjob1  # Start the job that executes the TCP/IP reset function
   Do {[System.Windows.Forms.Application]::DoEvents()} Until ($jobby1.State -eq 'Completed')  # Wait for the job to complete
   $console1.Text = Get-Job | Receive-Job  # Retrieve the output from the job and display it in the console
   Remove-Job $jobby1
   $tcpipstack_button1.Enabled = $true  # Re-enable the button
 }

#add another button to the form
$ping_btn = New-Object System.Windows.Forms.Button
$ping_btn.text = 'Ping'
$pingtooltip = New-Object System.Windows.Forms.ToolTip
$pingtooltip2 = "Pings a local device, or public ip, and returns true if it exists and is online, or false if its not online, or doesn't exist"
$pingtooltip.SetToolTip($ping_btn, $pingtooltip2)
$ping_btn.add_MouseHover({ $pingtooltip })
$ping_btn.location = New-Object -TypeName System.Drawing.Point (120,80)
$ping_btn.size = New-Object -TypeName System.Drawing.Size (110,30)
$ping_btn.add_click{
$console1.Lines += Test-Connection -ComputerName $theTbox2.Text -Quiet -Count 1 | Out-String}

# Define a function called Get-IPGeolocation that takes an IP address as a parameter
Function Get-IPGeolocation
{
  Param
  (
    [string]$IPAddress # Parameter to hold IP address
  )

  # Make an API request to get the geolocation information for the given IP address
  $request = Invoke-RestMethod -Method Get -Uri "https://ipapi.co/$IPAddress/json"

  # Create a custom object with properties for the geolocation information obtained from the API response
  [PSCustomObject]@{
    IP = $request.IP
    City = $request.City
    Country = $request.Country_Name
    Code = $request.Country_Code
    Location = $request.Latitude
    Longitude = $request.Longitude
    TimeZone = $request.Timezone
  }
  
  # Set the text of the console to the API response content
  $console1.text = $request
}

# Create a new button object and set its properties
$geo_btn = New-Object System.Windows.Forms.Button
$geo_btn.text = 'Geolocation Ping'
$tooltip12 = New-Object System.Windows.Forms.ToolTip
$tipMigrate2 = "Enter the public IP above, and then click this button and it'll do an ip lookup basically"
$tooltip12.SetToolTip($geo_btn, $tipMigrate2)
$geo_btn.add_MouseHover({ $tooltip12 })
$geo_btn.location = New-Object -TypeName System.Drawing.Point (120,200)
$geo_btn.size = New-Object -TypeName System.Drawing.Size (110,30)

# Add a click event to the button that will call the Get-IPGeolocation function
$geo_btn.add_click{
  $geo_btn.Enabled = $false # Disable the button while the function is running
  Get-IPGeolocation # Call the Get-IPGeolocation function to perform the API request and display the results in the console

  $ipAddress = $theTbox2.Text
  Get-IPGeolocation -IPAddress $ipAddress # Call the Get-IPGeolocation function with the specified IP

  Start-Sleep -s 3 # Wait for 1.5 seconds before re-enabling the button
  $geo_btn.Enabled = $true # Re-enable the button
}




#add a input textbox to the form
$theTbox2 = New-Object System.Windows.Forms.TextBox
$theTbox2.text = 'Enter IP'
$theTbox2.location = New-Object -TypeName System.Drawing.Point (120,50)
$theTbox2.size = New-Object -TypeName System.Drawing.Size (100,20)

	




#add another button to the form
$sysinfo_btn = New-Object System.Windows.Forms.Button
$sysinfo_btn.text = 'Systeminfo'
$sysinfo_btn.location = New-Object -TypeName System.Drawing.Size (240,110)
$sysinfo_btn.size = New-Object -TypeName System.Drawing.Size (110,30)
$sysinfo_btn.add_click{
$sysinfo_btn.Enabled = $false
$console1.Text =Get-ComputerInfo -Property '*Version'| Out-String
Start-Sleep -s 1
$sysinfo_btn.Enabled = $true
}

$scriptBlockforscan = {
 
}


$scan_btn = New-Object System.Windows.Forms.Button
$scan_btn.text = 'Scan Network' # Sets the button text.
#$scan_btn = New-Object System.Windows.Forms.ToolTip # Creates a new tooltip object.
#$Scan_button2 = "Scans the local (or maybe public) IP address range, usage: 192.168.0 - GUI will not freeze in the process." # Sets the tooltip text.
#$Scan_button1.SetToolTip($scan_btn, $Scan_button2) # Associates the tooltip with the button object.
#$scan_btn.add_MouseHover({ $Scan_button1 }) # Adds a mouse hover event handler that displays the tooltip.
$scan_btn.location = New-Object -TypeName System.Drawing.Size (120,110) # Sets the location of the button on the GUI.
$scan_btn.size = New-Object -TypeName System.Drawing.Size (110,30) # Sets the size of the button.
$scan_btn.add_click{

$ipv4 = $theTbox2.Text # Get the IP address prefix to scan from the GUI text box.
$firstoctic = 1 # Set the first octet of the IP address to scan.
$lastoctic = 254 # Set the last octet of the IP address to scan.
$ping = 1 # Set the number of ping attempts to send.

$job = Start-Job -ScriptBlock {
param($ipv4, $firstoctic, $lastoctic, $ping)
$results = @()
while ($firstoctic -le $lastoctic) # Loop through all the octets in the IP address range.
{
$IP = ('{0}.{1}' -f $ipv4, $firstoctic) # Build the IP address to ping.
try
{
$pingResult = Test-Connection -ComputerName $IP -count $ping -ErrorAction Stop # Attempt to ping the IP address.
$result = [PSCustomObject]@{
IP = $IP
Status = 'Reachable'
ResponseTime = $pingResult.ResponseTime
}
$results += $result
}
catch
{
$result = [PSCustomObject]@{
IP = $IP
Status = 'Unreachable'
ResponseTime = $null
}
$results += $result
}
$firstoctic++
}
$results | Out-GridView
$results | Export-Csv -Path "$PSScriptRoot\Result.csv" -NoTypeInformation -Append
} -ArgumentList $ipv4, $firstoctic, $lastoctic, $ping

$job | Wait-Job | Receive-Job

}



#add another button to the form
$stopptr = New-Object System.Windows.Forms.Button
$stopptr.text = 'Stop Printer'
$stopptr.location = New-Object -TypeName System.Drawing.Point (120,170) 
$stopptr.size = New-Object -TypeName System.Drawing.Size (80,30)
$stopptr.add_click{
  & "$env:windir\system32\net.exe" stop spooler
  $console1.Text = 'Stopping Printer Services..'
}

#add another button to the form
$startptr = New-Object System.Windows.Forms.Button
$startptr.text = 'Start Printer'
$startptr.location = New-Object -TypeName System.Drawing.Point (200,170) 
$startptr.size = New-Object -TypeName System.Drawing.Size (80,30)
$startptr.add_click{
  & "$env:windir\system32\net.exe" start spooler
  $console1.Text = 'Starting Printer Services..'
}





#add a input textbox to the form
$theTbox3 = New-Object System.Windows.Forms.TextBox
$theTbox3.text = 'Enter IP/HostName'
$theTbox3.location = New-Object -TypeName System.Drawing.Point (240,50)
$theTbox3.size = New-Object -TypeName System.Drawing.Size (100,20)


#add another button to the form
$ResolveIP = New-Object System.Windows.Forms.Button
$ResolveIP.text = 'Resolve'
$ResolveIP.location = New-Object -TypeName System.Drawing.Point (240,80) 
$ResolveIP.size = New-Object -TypeName System.Drawing.Size (80,30)
$ResolveIP.add_click{
  $console1.Text = resolve-DnsName -Name $theTbox3.Text | Out-String 
}


        $Tab11.Controls.Add($theTbox1)
        $Tab11.Controls.Add($textboxlabel1)
        $Tab11.Controls.Add($console1)
        $Tab11.Controls.Add($tracert_button1)
        $Tab11.Controls.Add($tracerts_button1)
        $Tab11.Controls.Add($ClearDNS)
        $Tab11.Controls.Add($ipconf_button1)
        $Tab11.Controls.Add($Go_button1)
        $Tab11.Controls.Add($tcpipstack_button1)
  #      #########################################################      #
        $Tab11.Controls.Add($ping_btn)
        $Tab11.Controls.Add($scan_btn)
        $Tab11.Controls.Add($geo_btn)
        $Tab11.Controls.Add($stopptr)
        $Tab11.Controls.Add($startptr)
        $Tab11.Controls.Add($theTbox2)
        $Tab11.Controls.Add($theTbox3)
        $Tab11.Controls.Add($ResolveIP)
        $Tab11.Controls.Add($sysinfo_btn)
        # Add admin controls here


    # Create a TabPage (Tab1)
    $Tab22 = New-Object System.Windows.Forms.TabPage
    $Tab22.DataBindings.DefaultDataSourceUpdateMode = 0
    $Tab22.UseVisualStyleBackColor = $true
    $Tab22.Name = 'Tab2'
    $Tab22.Text = 'Server Commands'
    $FormTabControl1.Controls.Add($Tab22)

    # Set the background image for Tab11
    $Tab22.BackgroundImageLayout = 'None'
    $Tab22.BackgroundImage = $alkanelogo

    # Add the console box to Tab1
    $console2 = New-Object System.Windows.Forms.RichTextBox
    $console2.Location = New-Object System.Drawing.Point(450, 0)
    $console2.Size = New-Object System.Drawing.Size(220, 330)
    $console2.ReadOnly = $true
    $console2.Multiline = $true
    $console2.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
    $console2.ForeColor = [System.Drawing.Color]::Black
    $console2.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Regular)
    $console2.Text = "CURRENT VERSION: $version `n Next Version: 4.0 `n Ignore if you already have $version"

    $clrserverdnscache_btn = New-Object System.Windows.Forms.Button
    $clrserverdnscache_btn.text = 'Clear Server DNS Cache'
    $clrserverdnscache_btn.location = New-Object -TypeName System.Drawing.Point (10,50) 
    $clrserverdnscache_btn.size = New-Object -TypeName System.Drawing.Size (80,30)
    $clrserverdnscache_btn.add_click{
        $clrserverdnscache_btn.Enabled = $false
        $console2.Text = 'Clearing The DNS Cache'
        & "$env:ComSpec" /c dnscmd /clearcache 
            Start-Sleep -milliseconds 1500
        $clrserverdnscache_btn.Enabled = $true
    }
    
    $Tab22.Controls.Add($console2)
    $Tab22.Controls.Add($clrserverdnscache_btn)
    
#

    $Tab33 = New-Object System.Windows.Forms.TabPage
    $Tab33.DataBindings.DefaultDataSourceUpdateMode = 0
    $Tab33.UseVisualStyleBackColor = $true
    $Tab33.Name = 'Tab3'
    $Tab33.Text = 'General Use #2'
    $FormTabControl1.Controls.Add($Tab33)

    # Set the background image for Tab11
    $Tab33.BackgroundImageLayout = 'None'
    $Tab33.BackgroundImage = $alkanelogo

    # Add the console box to Tab1
    $console3 = New-Object System.Windows.Forms.RichTextBox
    $console3.Location = New-Object System.Drawing.Point(450, 0)
    $console3.Size = New-Object System.Drawing.Size(220, 330)
    $console3.ReadOnly = $true
    $console3.Multiline = $true
    $console3.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
    $console3.ForeColor = [System.Drawing.Color]::Black
    $console3.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Regular)
    $console3.Text = "CURRENT VERSION: $version `n Next Version: 4.0 `n Ignore if you already have $version"

    function script:procInfo {
        $device=$dropdown1.SelectedItem.ToString() #populate the var with the value you selected
        $pingResult=New-NetIPAddress -IPAddress $ipaddr.Text -InterfaceAlias $device -PrefixLength $subnet.Text -DefaultGateway $gateway.Text -AddressFamily IPv4
        $console3.text=$pingResult
        start-sleep -s 2
        $console3.text = '- Success -'
      } #end procInfo
      
      # Create a dropdown list to select the interface
      $dropdown1 = New-Object -TypeName System.Windows.Forms.ComboBox
      $dropdown1.Location = New-Object System.Drawing.Size (12,10) 
      $dropdown1.Size = New-Object System.Drawing.Size (100,20) 
      $dropdown1.DropDownHeight = 200 
      $Tab33.Controls.Add($dropdown1) 
      
      # Populate the dropdown list with available interfaces
      $wksList=@('Ethernet','Wi-Fi')
      foreach ($wks in $wksList) {
        $dropdown1.Items.Add($wks)
      } #end foreach
      
      # Add a button to change the network configuration
      $button = New-Object System.Windows.Forms.Button
      $button.Location = New-Object System.Drawing.Point (10,182)
      $button.Size = New-Object System.Drawing.Size (55,25)
      $button.Text = 'Change'
      $button.Add_Click{
        $console3.Text = 'Starting.. '
        procInfo
      }
      
      # Add input textboxes for IP address, subnet mask, default gateway, and DNS servers
      $ipaddr = New-Object System.Windows.Forms.TextBox
      $ipaddr.text = 'IP'
      $ipaddr.location = New-Object System.Drawing.Point (12,50)
      $ipaddr.size = New-Object System.Drawing.Size (100,20)
      
      $subnet = New-Object System.Windows.Forms.TextBox
      $subnet.text = 'Prefix'
      $subnet.location = New-Object System.Drawing.Point (12,75)
      $subnet.size = New-Object System.Drawing.Size (100,20)
      
      $gateway = New-Object System.Windows.Forms.TextBox
      $gateway.text = 'Default Gateway'
      $gateway.location = New-Object System.Drawing.Point (12,100)
      $gateway.size = New-Object System.Drawing.Size (100,20)
      
      $PreDNS = New-Object System.Windows.Forms.TextBox
      $PreDNS.text = ''
      $PreDNS.location = New-Object System.Drawing.Point (12,125)
      $PreDNS.size = New-Object System.Drawing.Size (100,20)
      
      $altDNS = New-Object System.Windows.Forms.TextBox
      $altDNS.text = ''
      $altDNS.location = New-Object System.Drawing.Point (12,150)
      $altDNS.size = New-Object System.Drawing.Size (100,20)
      
      #The procInfo function is called when the "Change" button is clicked, and it sets the IP address, subnet mask, default gateway, and DNS servers for the selected network interface. The function waits for 2 seconds before updating the console with a success message.
      #The script also creates a dropdown list to select the network interface, and populates it with the available interfaces. Additionally, the script creates several input textboxes for the IP address, subnet mask, default gateway, and DNS servers.
      
      ##################################
      ##################################
      ##################################
      ##################################
      
      
      $Tab33.Controls.add($button)
      $Tab33.Controls.add($ipaddr)
      $Tab33.Controls.add($subnet)
      $Tab33.Controls.add($gateway)
      $Tab33.Controls.add($PreDNS)
      $Tab33.Controls.add($altDNS)
      $Tab33.Controls.Add($dropdown1)
      $Tab33.Controls.Add($Name)
      $Tab33.Controls.Add($netuse)
      $Tab33.Controls.Add($netuseip)
      $Tab33.Controls.Add($ShareName)
      $Tab33.Controls.Add($pass)
      $Tab33.Controls.Add($dropdown2)
      $Tab33.Controls.Add($console3)
    



      $Point = 'System.Drawing.Point'
      $textboxes = 'System.Windows.Forms.TextBox'
      $TabPages = 'System.Windows.Forms.Tabpage'
      $Size = 'System.Drawing.Size'
      $buttons = 'System.Windows.Forms.Button'
      $textboxes = 'system.Windows.Forms.Textbox'
      $rtb = 'system.Windows.Forms.RichTextBox'
      $drawing = 'system.Drawing.Size'
      $buttons = 'windows.forms.button'

     
$Tab4 = New-Object System.Windows.Forms.TabPage
$Tab4.DataBindings.DefaultDataSourceUpdateMode = 0 
$Tab4.UseVisualStyleBackColor = $True 
$Tab4.Name = 'Tab4' 
$Tab4.Text = 'Software / PC Optimization'
$FormTabControl1.Controls.Add($Tab4)


$FormTabControl1 = New-object -TypeName System.Windows.Forms.TabControl 
$FormTabControl1.Size = '420,300' 
$FormTabControl1.Location = '10,10' 
$adminForm.Controls.Add($FormTabControl1)

$Tab5 = New-object -TypeName $TabPages
$Tab5.DataBindings.DefaultDataSourceUpdateMode = 0 
$Tab5.UseVisualStyleBackColor = $True 
$Tab5.Name = 'Tab5' 
$Tab5.Text = 'Utilties' 
$FormTabControl1.Controls.Add($Tab5)


$syscheck = {
Start-Sleep -Seconds 170 

}

$controljob = {
control.exe
}

$control = New-Object -TypeName $buttons
$control.Location = New-Object -TypeName $Point -ArgumentList (0,30)
$control.Size = New-Object -TypeName $Size -ArgumentList (120,30)
$control.Text = 'Control Panel'
$control.Add_Click{ 

 $control.Enabled = $false
  $jobby = Start-Job -ScriptBlock $controljob
  Do {[System.Windows.Forms.Application]::DoEvents()} Until ($jobby.State -eq 'Completed')
  $console4.Text = Get-Job | Receive-Job
  Start-Sleep -Seconds 1
  $control.Enabled = $true
}



#add a input textbox to the form
$noticetextbox = New-Object -TypeName $textboxes
$noticetextbox.text = 'Enter Value for notice'
$noticetextbox.location = New-Object -TypeName $drawing -ArgumentList (140,66)
$noticetextbox.size = New-Object -TypeName $Size -ArgumentList (105,25)


$notice = New-Object -TypeName $buttons
$notice.Location = New-Object -TypeName $Point -ArgumentList (130,30)
$notice.Size = New-Object -TypeName $Size -ArgumentList (120,30)
$tooltip1222 = New-Object System.Windows.Forms.ToolTip
$tipMigrate2222 = "Sets a notice on first log on/start up. Usually used as a legal notice"
$tooltip1222.SetToolTip($notice, $tipMigrate2222)
$notice.add_MouseHover({ $tooltip1222 })
$notice.Text = 'Add a notice'
$notice.Add_Click{ 
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "legalnoticetext" -Type String -Value $noticetextbox.text
}


###################
$global:defaultvalue = 50
$TrackBar = New-Object Windows.Forms.TrackBar
$valueLabel = New-Object System.Windows.Forms.Label 
#  TrackBar
$TrackBar.Location = "140, 120"
$TrackBar.Orientation = "Horizontal"
$TrackBar.Width = 100
$TrackBar.Height = 40
$TrackBar.TickFrequency = 100
$TrackBar.TickStyle = "TopLeft"
$TrackBar.SetRange(0, 100)
$TrackBarValue = 50
$TrackBar.Value = 50

#Frequency TrackBar Event Handler
$TrackBar.add_ValueChanged({
$TrackBarValue = $TrackBar.Value
$valueLabel.Text = "Value ($TrackBarValue)"
$global:defaultvalue = $TrackBarValue
})


# Frequency Label
$valueLabel.Location = "240,130"
$valueLabel.Size = "50,30"
$valueLabel.Text = "Value ($TrackBarValue)"

Function changevalue {
    Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\Psched' -Name 'NonBestEffortLimit' -Type DWord -Value $global:defaultvalue
    gpupdate /force
}

$qos = New-Object -TypeName $buttons
$qos.Location = New-Object -TypeName $Point -ArgumentList (130,90)
$qos.Size = New-Object -TypeName $Size -ArgumentList (120,30)
$tooltip122222 = New-Object System.Windows.Forms.ToolTip
$tipMigrate211111 = "Determines the percentage of connection bandwidth that the system can reserve. ---- Use the slider below to adjust the value, then click on this button.  "
$tooltip122222.SetToolTip($qos, $tipMigrate211111)
$qos.add_MouseHover({ $tooltip122222 })
$qos.Text = 'QOS Value Change'
$qos.Add_Click{ 
changevalue
}

##########################


$disablelllmnr = New-Object -TypeName $buttons
$disablelllmnr.Location = New-Object -TypeName $Point -ArgumentList (250,90)
$disablelllmnr.Size = New-Object -TypeName $Size -ArgumentList (120,30)
$tooltip1222222 = New-Object System.Windows.Forms.ToolTip
$tipMigrate2111111 = "recommended on personal workstations.. it would be too much info to put here"
$tooltip1222222.SetToolTip($disablelllmnr, $tipMigrate2111111)
$disablelllmnr.add_MouseHover({ $tooltip1222222 })
$disablelllmnr.Text = 'Disable LLMNR'
$disablelllmnr.Add_Click{
DisplayMB

}

Function DisplayMB {
Add-Type -AssemblyName PresentationFramework
$msgBoxInput = [System.Windows.MessageBox]::Show('Are you sure?','Confirm','YesNo','Question')
switch ($msgBoxInput) {
'Yes' {

$console4.Text = "Done."
if (Test-Path -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient"){
    $console4.SelectionColor = [Drawing.Color]::Green
    $console4.text = 'Folder already there'
    start-sleep -s 2
    $console4.Text = "Adding registry..."
    start-sleep -s 2
    $console4.text = "Done."
    gpupdate /force
    
  }  
  else{
  $console4.text = "Folder not there.. Creating Folder"
   New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT" -Name "DNSClient" -Force
   start-sleep 1
   $console4.text = "Adding registry key now.."
   start-sleep -s 1
   Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient" -Name 'EnableMultiCast' -Type Dword -Value 0  -Force
  $console4.text = "done."
  gpupdate /force
  }

}
'No' {
$console4.text = "You cancel'd the process"
}

}
}



# Create a new button object and assign it to the variable $Cleartempfiles
# The value of the $buttons variable is not shown, so we don't know what type of button is being created
$Cleartempfiles = New-Object -TypeName $buttons 
# Set the location of the button to (0,0)
$Cleartempfiles.Location = New-Object -TypeName $Point -ArgumentList (0,0)
# Set the size of the button to (120,30)
$Cleartempfiles.Size = New-Object -TypeName $Size -ArgumentList (120,30)
# Set the text displayed on the button to "Clean Temp Files/RB"
$Cleartempfiles.Text = 'Clean Temp Files/RB'
# Create a new tooltip object and assign it to the variable $Cleartempfiles1
$Cleartempfiles1 = New-Object System.Windows.Forms.ToolTip
# Create a string with the message to be displayed in the tooltip
$Cleartempfiles2 = "It removes temp files from C:\Temp & ~\AppData\Local\Temp & Recycle Bin"
# Set the tooltip message for the button to $Cleartempfiles2
$Cleartempfiles1.SetToolTip($Cleartempfiles, $Cleartempfiles2)
# Add a MouseHover event to the button that displays the tooltip
$Cleartempfiles.add_MouseHover({ $Cleartempfiles1 })
# Add a Click event to the button
$Cleartempfiles.Add_Click{
    # Disable the button while the code is running
    $cleartempfiles.Enabled = $false
    # Set the text of a console window to "starting..."
    $console4.text = "starting..."
    # Set the text of a console window to a message indicating that the code is running
    $console4.text = "Please wait a few... How long it takes, may depend on how many temp files there are"
    # Create an array of two paths to temporary file folders to be cleared
    $tempfolders = @( 'C:\Windows\Temp\*', "$env:temp\*" )
    # Remove all files and directories in the temporary file folders
    Remove-Item -Path $tempfolders -Recurse -Force
    # Clear the Recycle Bin
    Clear-RecycleBin -Force
    # Get the size of the files in the temporary file folders and calculate the total size
    $data = Get-ChildItem -Path $tempfolders -Recurse | Measure-Object -property length -sum 
    if ($data.sum -ige 1074000000){    # Check if total size of temp files is greater than or equal to 1074000000 bytes (1 GB)
      $inbytes = $data.sum  / 1074000000    # Convert total size to gigabytes
      $inmbs = ('{0}' -f $inbytes).split('.')    # Split the gigabytes into two parts, before and after the decimal point
      $size = $inmbs[0] + '.' + $inmbs[1][0] + $inmbs[1][1] + ' Gbs'    # Format the size as a string with two decimal places and a unit of "Gbs"
  }elseif ($data.sum -ige 1049000){    # Check if total size of temp files is greater than or equal to 1049000 bytes (1 MB)
      $inbytes = $data.sum  / 1049000    # Convert total size to megabytes
      $inmbs = ('{0}' -f $inbytes).split('.')    # Split the megabytes into two parts, before and after the decimal point
      $size = $inmbs[0] + '.' + $inmbs[1][0] + $inmbs[1][1] + ' mbs'    # Format the size as a string with two decimal places and a unit of "mbs"
  }else{ $size = -join($data.sum, ' ', 'bytes') }    # If total size is less than 1049000 bytes, format the size as a string with a unit of "bytes"
  $count = -join($data.count, ' ', 'temporary files')    # Format the count of temporary files as a string with a unit of "temporary files"
  
  $console4.Text = ('Total {0}, Size of {1} Removed' -f $count, $size)    # Set the text of the $console4 object to a string with placeholders for the count and size values
  Start-Sleep -s 2    # Pause the script for 2 seconds
  $cleartempfiles.Enabled = $true    # Enable the $cleartempfiles button
}

# Creates a new button object and assigns it to $chckwsf
$chckwsf = New-Object -TypeName $buttons 

# Sets the location of the button on the form
$chckwsf.Location = New-Object -TypeName $Point -ArgumentList (130,0)

# Sets the size of the button
$chckwsf.Size = New-Object -TypeName $Size -ArgumentList (120,30)

# Sets the text of the button
$chckwsf.Text = 'Check System Files'

# Creates a new tooltip object and assigns it to $chckwsf1
$chckwsf1 = New-Object System.Windows.Forms.ToolTip

# Sets the tooltip text to be displayed when the mouse hovers over the button
$chckwsf2 = "Checks your system files, this does take a long time"
$chckwsf1.SetToolTip($chckwsf, $chckwsf2)

# Adds an event handler to the button's MouseHover event
$chckwsf.add_MouseHover({ $chckwsf1 })

# Adds an event handler to the button's Click event
$chckwsf.Add_Click{ 

  # Sets the text of the console output to notify the user that the script is running
  $console4.text = "Please wait a few... GUI will freeze for a couple of minutes.."

  # Attempts to run the sfc /verifyOnly command to check system files
  try {
    sfc /verifyOnly
    
    # If the command exits with a non-zero exit code, throws an error
    if ($lastExitCode -ne "0") { throw $console4.text = "'sfc /verifyOnly' failed" }

    # Sets the text of the console output to indicate that the check was successful
    $console4.text = " checked Windows system files" 

    # Exits with a success code
    exit 0 

  } catch {
    # If an error occurs, sets the text of the console output to display the error message
    $console4.text = "⚠️ Error: $($Error[0]) ($($MyInvocation.MyCommand.Name):$($_.InvocationInfo.ScriptLineNumber))"| Out-File

    # Exits with an error code
    exit 1
  }
}

# Declares an array of Windows 10 apps to be removed
$Bloatware = @(
    # Unnecessary Windows 10 AppX Apps
    "Microsoft.3DBuilder"
    "Microsoft.Microsoft3DViewer"
    "Microsoft.AppConnector"
    "Microsoft.BingFinance"
    "Microsoft.BingNews"
    "Microsoft.BingSports"
    "Microsoft.BingTranslator"
    "Microsoft.BingWeather"
    "Microsoft.BingFoodAndDrink"
    "Microsoft.BingHealthAndFitness"
    "Microsoft.BingTravel"
    "Microsoft.MinecraftUWP"
    "Microsoft.GamingServices"
    # "Microsoft.WindowsReadingList"
    "Microsoft.GetHelp"
    "Microsoft.Getstarted"
    "Microsoft.Messaging"
    "Microsoft.Microsoft3DViewer"
    "Microsoft.MicrosoftSolitaireCollection"
    "Microsoft.NetworkSpeedTest"
    "Microsoft.News"
    "Microsoft.Office.Lens"
    "Microsoft.Office.Sway"
    "Microsoft.Office.OneNote"
    "Microsoft.OneConnect"
    "Microsoft.People"
    "Microsoft.Print3D"
    "Microsoft.SkypeApp"
    "Microsoft.Wallet"
    "Microsoft.Whiteboard"
    "Microsoft.WindowsAlarms"
    "microsoft.windowscommunicationsapps"
    "Microsoft.WindowsFeedbackHub"
    "Microsoft.WindowsMaps"
    "Microsoft.WindowsPhone"
    "Microsoft.WindowsSoundRecorder"
    #"Microsoft.XboxApp"
    #"Microsoft.ConnectivityStore"
    "Microsoft.CommsPhone"
    "Microsoft.ScreenSketch"
    #"Microsoft.Xbox.TCUI"
    #"Microsoft.XboxGameOverlay"
    #"Microsoft.XboxGameCallableUI"
    "Microsoft.XboxSpeechToTextOverlay"
    "Microsoft.MixedReality.Portal"
    # "Microsoft.XboxIdentityProvider"
    "Microsoft.ZuneMusic"
    "Microsoft.ZuneVideo"
    "Microsoft.YourPhone"
    "Microsoft.Getstarted"
    "Microsoft.MicrosoftOfficeHub"

    #Sponsored Windows 10 AppX Apps
    #Add sponsored/featured apps to remove in the "*AppName*" format
    "*EclipseManager*"
    "*ActiproSoftwareLLC*"
    "*AdobeSystemsIncorporated.AdobePhotoshopExpress*"
    "*Duolingo-LearnLanguagesforFree*"
    "*PandoraMediaInc*"
    "*CandyCrush*"
    "*BubbleWitch3Saga*"
    "*Wunderlist*"
    "*Flipboard*"
    "*Twitter*"
    "*Facebook*"
    "*Royal Revolt*"
    "*Sway*"
    "*Speed Test*"
    "*Dolby*"
    "*Viber*"
    "*ACGMediaPlayer*"
    "*Netflix*"
    "*OneCalendar*"
    "*LinkedInforWindows*"
    "*HiddenCityMysteryofShadows*"
    "*Hulu*"
    "*HiddenCity*"
    "*AdobePhotoshopExpress*"
    "*HotspotShieldFreeVPN*"
    "*Microsoft.Advertising.Xaml*"

)



#  -----------------------------------
#  -
#Disables the BigTweaks button to prevent accidental execution of the script while it is already running.
#Enables System Restore on the C:\ drive.
#Sets the System Restore Point Creation Frequency to 0, effectively disabling System Restore Point creation.
#Creates a system checkpoint with the description "b4tweaks" and restore point type "MODIFY_SETTINGS".
#Disables telemetry by setting the AllowTelemetry registry value to 0.
#Disables Content Delivery Manager by setting various registry values related to pre-installed apps and suggestions to 0.
#Disables the Activity Feed and User Activity collection by setting registry values to 0.
#Sets the number of times the System Initiated User Feedback (SIUF) can run in a period to 0.
#Hides the Do Not Show Feedback Notifications setting.
#Disables two scheduled tasks related to the DMClient and error reporting.
#Disables Advertising Info by setting the DisabledByGroupPolicy registry value to 1.
#Disables error reporting by setting the Disabled registry value to 1 and disabling the QueueReporting scheduled task.
#Disables specific subscribed content for Content Delivery Manager by setting registry values to 0.
#Sets the TaskbarAnimations and VisualFXSetting registry values to 0 and 3, respectively, to disable animations and set visual effects to the best performance setting.
#Disables Cloud Content by creating the DisableWindowsConsumerFeatures registry value and setting it to 1.
#Sets the IRPStackSize registry value to 25 to optimize network performance.
#Disables People suggestions in the Explorer Advanced settings by setting the registry value to "...".         
#  -
#  -----------------------------------


$BigTweaks = New-Object -TypeName $buttons
$BigTweaks.Location = New-Object -TypeName $Point -ArgumentList (0,155)
$BigTweaks.Size = New-Object -TypeName $Size -ArgumentList (80,80)
$BigTweaks.Text = 'BigTweaks, irreversible (unless you know what youre doing)'
$BigTweaks1 = New-Object System.Windows.Forms.ToolTip
$BigTweaks2 = "Does a lot in the registry, but it tweaks out your PC."
$BigTweaks1.SetToolTip($BigTweaks, $BigTweaks2)
$BigTweaks.add_MouseHover({ $BigTweaks1 })
$BigTweaks.Add_Click{

  # Disable the button to prevent multiple clicks
  $BigTweaks.Enabled = $false
  Enable-ComputerRestore -Drive 'C:\'
  # Enable System Restore and create a restore point with a description of 'b4tweaks'
  & "$env:windir\system32\reg.exe" ADD 'HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore' /V 'SystemRestorePointCreationFrequency' /T REG_DWORD /D 0 /F
  Checkpoint-Computer -Description 'b4tweaks' -RestorePointType 'MODIFY_SETTINGS'
  # Set various registry values to disable telemetry, pre-installed apps, and other features
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection' -Name 'AllowTelemetry' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'ContentDeliveryAllowed' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'OemPreInstalledAppsEnabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'PreInstalledAppsEnabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'PreInstalledAppsEverEnabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SilentInstalledAppsEnabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SystemPaneSuggestionsEnabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\System' -Name 'EnableActivityFeed' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\System' -Name 'PublishUserActivities' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\System' -Name 'UploadUserActivities' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Siuf\Rules' -Name 'NumberOfSIUFInPeriod' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection' -Name 'DoNotShowFeedbackNotifications' -Type DWord -Value 1
    # Disable various scheduled tasks
  $null = Disable-ScheduledTask -TaskName 'Microsoft\Windows\Feedback\Siuf\DmClient' -ErrorAction SilentlyContinue
  $null = Disable-ScheduledTask -TaskName 'Microsoft\Windows\Feedback\Siuf\DmClientOnScenarioDownload' -ErrorAction SilentlyContinue
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\AdvertisingInfo' -Name 'DisabledByGroupPolicy' -Type DWord -Value 1
  Write-Host 'Disabling Error reporting...'
    # Disable advertising and error reporting
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting' -Name 'Disabled' -Type DWord -Value 1
  $null = Disable-ScheduledTask -TaskName 'Microsoft\Windows\Windows Error Reporting\QueueReporting'
  Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SubscribedContent-338387Enabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SubscribedContent-338388Enabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SubscribedContent-338389Enabled' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SubscribedContent-353698Enabled' -Type DWord -Value 0
  If (!(Test-Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent')) {
    $null = New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent' -Force
  }
  Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "TaskbarAnimations" -Type DWord -Value 0
  Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Type DWord -Value 3
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent' -Name 'DisableWindowsConsumerFeatures' -Type DWord -Value 1
  Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters' -Name 'IRPStackSize' -Type DWord -Value 25
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People' -Name 'PeopleBand' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People' -Name 'PeopleBand' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name 'SystemUsesLightTheme' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize' -Name 'AppsUseLightTheme' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'ShowTaskViewButton' -Type DWord -Value 0
  Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People' -Name 'PeopleBand' -Type DWord -Value 0
  Set-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "ShowSuperHidden" -Type DWord -Value 1


  Powercfg.exe -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
      
            Powercfg.exe /S $A[3]
        $A = (powercfg.exe -l | findstr -i Ultimate).split()
        Powercfg.exe /S $A[3]

# Set the window state of the form to minimized
$form.WindowState = 1

# Check if the registry key for disabling OneDrive file sync exists and create it if it doesn't
If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive")) {
    New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive" | Out-Null
}

# Set the "DisableFileSyncNGSC" value in the registry to 1 to disable OneDrive file sync
Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive" -Name "DisableFileSyncNGSC" -Type DWord -Value 1

# Stop the OneDrive process if it is running
Stop-Process -Name "OneDrive" -ErrorAction SilentlyContinue

# Pause execution for 2 seconds
Start-Sleep -s 2

# Determine the path of the OneDriveSetup.exe file and run it with the "/uninstall" argument to uninstall OneDrive
$onedrive = "$env:SYSTEMROOT\SysWOW64\OneDriveSetup.exe"
If (!(Test-Path $onedrive)) {
    $onedrive = "$env:SYSTEMROOT\System32\OneDriveSetup.exe"
}
Start-Process $onedrive "/uninstall" -NoNewWindow -Wait

# Pause execution for 2 seconds
Start-Sleep -s 2

# Stop the Windows Explorer process if it is running
Stop-Process -Name "explorer" -ErrorAction SilentlyContinue

# Pause execution for 2 seconds
Start-Sleep -s 2

# Remove all OneDrive related files and folders
Remove-Item -Path "$env:USERPROFILE\OneDrive" -Force -Recurse -ErrorAction SilentlyContinue
Remove-Item -Path "$env:LOCALAPPDATA\Microsoft\OneDrive" -Force -Recurse -ErrorAction SilentlyContinue
Remove-Item -Path "$env:PROGRAMDATA\Microsoft OneDrive" -Force -Recurse -ErrorAction SilentlyContinue
Remove-Item -Path "$env:SYSTEMDRIVE\OneDriveTemp" -Force -Recurse -ErrorAction SilentlyContinue

# Check if the HKCR: registry drive exists and create it if it doesn't
If (!(Test-Path "HKCR:")) {
    New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT | Out-Null
}

# Remove the OneDrive CLSID from the registry
Remove-Item -Path "HKCR:\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" -Recurse -ErrorAction SilentlyContinue
Remove-Item -Path "HKCR:\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" -Recurse -ErrorAction SilentlyContinue

# Set the window state of the form to normal
$formWindowsToolbox.WindowState = 0

# Loop through each bloatware app and uninstall it
foreach ($Bloat in $Bloatware) {
    Get-AppxPackage -Name $Bloat | Remove-AppxPackage
    Get-AppxProvisionedPackage -Online | Where-Object DisplayName -like $Bloat | Remove-AppxProvisionedPackage -Online
    Write-Host "Trying to remove $Bloat."
    # Update the text in a console object to show progress

        $console4.text = "`r`n" +"`r`n" + "Trying to remove $Bloat."
    }
 
    $console4.text = "`r`n" +"`r`n" + "Finished Removing Bloatware Apps"
          Start-Sleep -s 2
  $button.Enabled = $true
}



# Create a button object for the GodModeOption button
$GodModeOption = New-Object -TypeName $buttons
# Set the location of the button on the form
$GodModeOption.Location = New-Object -TypeName $Point -ArgumentList (250,60)
# Set the size of the button on the form
$GodModeOption.Size = New-Object -TypeName $Size -ArgumentList (120,30)
# Set the text of the button
$GodModeOption.Text = 'Create GodMode Folder'
# Define what should happen when the button is clicked
$GodModeOption.Add_Click{
  # Disable the GodModeOption button
  $GodModeOption.Enabled = $false

  # Create a new directory for the God Mode folder at the specified path
  [System.IO.Directory]::CreateDirectory("C:\God Mode.{ED7BA470-8E54-465E-825C-99712043E01C}")

  # Wait for 1 second before enabling the button again
  Start-Sleep -s 1

  # Enable the GodModeOption button
  $GodModeOption.Enabled = $true
}


# Create a new button object and set its properties
$rebootuefisettingswindows = New-Object -TypeName $buttons
$rebootuefisettingswindows.Location = New-Object -TypeName $Point -ArgumentList (250,30)
$rebootuefisettingswindows.Size = New-Object -TypeName $Size -ArgumentList (160,30)
$rebootuefisettingswindows.Text = 'Reboot to UEFI settings'

# Add an event handler to the button to run when it is clicked
$rebootuefisettingswindows.Add_Click{
  # Execute a command to reboot the computer and boot into UEFI settings
  cmd /c "shutdown -t -0 -r -fw"
  
  # Disable the button after it has been clicked to prevent multiple clicks
  $rebootuefisettingswindows.Enabled = $false
}

# Create another button object and set its properties
$rebootADVStartup = New-Object -TypeName $buttons
$rebootADVStartup.Location = New-Object -TypeName $Point -ArgumentList (250,0)
$rebootADVStartup.Size = New-Object -TypeName $Size -ArgumentList (160,30)
$rebootADVStartup.Text = 'Reboot into Advanced Setting Startup'

# Add an event handler to the button to run when it is clicked
$rebootADVStartup.Add_Click{
  # Execute a command to reboot the computer and boot into advanced startup options
  cmd /c "shutdown -t -0 -r -o"
  
  # Disable the button after it has been clicked to prevent multiple clicks
  $rebootADVStartup.Enabled = $false
}



$resetpc = New-Object -TypeName $buttons
$resetpc.Location = New-Object -TypeName $Point -ArgumentList (250,170)
$resetpc.Size = New-Object -TypeName $Size -ArgumentList (65,55)
$resetpc.Text = 'Reset the PC to default'
$resetpc.Add_Click{
 $resetpc.Enabled = $false
}
function script:ntfsformat {
  $device = $driveselect.SelectedItem.ToString() # Gets the selected item from $driveselect combo box
  $device2 = $driveselect.SelectedItem.ToString() # Gets the selected item from $driveselect combo box

  convert $device2 /fs:ntfs $a  # Converts the drive specified in $device2 to NTFS format, and stores the result in the $a variable
  $a = Format-Volume -DriveLetter $device # Formats the drive specified in $device as NTFS, and assigns the result to the $a variable
} #end function

$ntfsconvert = New-Object -TypeName $buttons # Creates a new button object and stores it in the $ntfsconvert variable
$ntfsconvert.Location = New-Object -TypeName $Point -ArgumentList (0,100) # Sets the location of the button to (0,100) pixels on the form
$ntfsconvert.Size = New-Object -TypeName $Size -ArgumentList (85,55) # Sets the size of the button to (85,55) pixels
$ntfsconvert.Text = 'NTFS Convert, Please be patient.' # Sets the text of the button to 'NTFS Convert, Please be patient.'
$ntfsconvert.Add_Click{
  ntfsformat # Calls the ntfsformat function when the button is clicked
}

$driveselect = New-Object -TypeName System.Windows.Forms.ComboBox # Creates a new combo box object and stores it in the $driveselect variable
$driveselect.Location = New-Object -TypeName $Size -ArgumentList (0,75) # Sets the location of the combo box to (0,75) pixels on the form
$driveselect.Size = New-Object -TypeName $Size -ArgumentList (100,20) # Sets the size of the combo box to (100,20) pixels
$driveselect.DropDownHeight = 200 # Sets the height of the drop-down list to 200 pixels
$drive = Get-WmiObject Win32_LogicalDisk | Select-Object -Expand DeviceID # Gets a list of all logical disks on the system, and stores their device IDs in the $drive variable

$1 = @($drive) # Creates an array variable $1 that contains the device IDs of all logical disks on the system

foreach ($2 in $1) {
  $driveselect.Items.Add($2) # Adds each device ID from the $1 array to the $driveselect combo box
} #end foreach


$Tab6 = New-object -TypeName $TabPages
$Tab6.DataBindings.DefaultDataSourceUpdateMode = 0 
$Tab6.UseVisualStyleBackColor = $True 
$Tab6.Name = 'Tab6' 
$Tab6.Text = 'Software' 
$FormTabControl1.Controls.Add($Tab6)

# Create a new button object and assign it to a variable
$checkwinget = New-Object -TypeName $buttons 

# Set the location of the button on the form
$checkwinget.Location = New-Object -TypeName $Point -ArgumentList (0,0) 

# Set the size of the button
$checkwinget.Size = New-Object -TypeName $Size -ArgumentList (110,30) 

# Set the text displayed on the button
$checkwinget.Text = 'Click me first' 

# Define what happens when the button is clicked
$checkwinget.Add_Click{
  
  # Disable the button to prevent multiple clicks
  $checkwinget.Enabled = $false
  
  # Check if winget.exe is already installed
  if (Test-Path ~\AppData\Local\Microsoft\WindowsApps\winget.exe){
    
    # If winget is already installed, change the text color of console4 to green
    $console4.SelectionColor = [Drawing.Color]::Green 
    
    # Display a message in console4 indicating that winget is already installed
    $console4.text = 'Winget Already Installed'
    
  }  
  else{
    # If winget is not installed, start the installation process
    
    # Display a message in console4 indicating that winget is being installed
    Write-Host 'Winget not found, installing it now.'
    $console4.text = "`r`n" +"`r`n" + 'Installing Winget... Please Wait'
    
    # Start the installation process using the ms-appinstaller protocol and the winget installation URL
    Start-Process 'ms-appinstaller:?source=https://aka.ms/getwinget'
    
    # Get the process ID of the AppInstaller process
    $nid = (Get-Process AppInstaller).Id
    
    # Wait for the AppInstaller process to finish installing winget
    Wait-Process -Id $nid
    
    # Display a message in the console indicating that winget has been installed
    Write-Host Winget Installed
    $console4.text = "`r`n" +"`r`n" + 'Winget Installed - Ready for Next Task'
          
    # Pause for 2 seconds to allow the user to see the installation message
    Start-Sleep -s 2
    
    # Enable the button for future use
    $checkwinget.Enabled = $true
  }

}





# Create a new object of the specified type
$Notepad = New-Object -TypeName $buttons
# Set the location of the Notepad button
$Notepad.Location = New-Object -TypeName $Point -ArgumentList (0,30)
# Set the size of the Notepad button
$Notepad.Size = New-Object -TypeName $Size -ArgumentList (110,30)
# Set the text of the Notepad button
$Notepad.Text = 'Notepad++'

# Create a new tooltip object
$tooltip1 = New-Object System.Windows.Forms.ToolTip
# Set the tooltip text for the Notepad button
$tipMigrate = "Click to install notepad++"
$tooltip1.SetToolTip($Notepad, $tipMigrate)

# Add a mouse hover event to the Notepad button
$Notepad.add_MouseHover({ $tooltip1 })

# Add a click event to the Notepad button
$Notepad.Add_Click{
  # Disable the Notepad button while installing
  $Notepad.Enabled = $false
  # Set the source URL for the Notepad++ installer
  $source = 'https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v8.3.3/npp.8.3.3.Installer.x64.exe'
  # Set the destination folder and filename for the Notepad++ installer
  $destination = 'c:\Temp\npp.8.3.3.Installer.x64.exe'

  # Check if Notepad++ is already installed. If it is, exit the script.
  if ((Test-Path 'C:\Program Files\Notepad++') -Or (Test-Path 'C:\Program Files\Notepad++')){
    # Write message to console
    $console4.text = 'Software already installed' 
    exit
  }

  # Check if the installer is in the destination folder. If not, create the file.
  If ((Test-Path $destination) -eq $false) {
    New-Item -ItemType File -Path $destination -Force
  } 

  # Download the Notepad++ installer from the source URL
  Invoke-WebRequest $source -OutFile $destination

  # Run the Notepad++ installer with specified arguments
  Start-Process -FilePath 'C:\Temp\npp.8.3.3.Installer.x64.exe' -ArgumentList '/S','/v','/qn' -Wait

  #Delete installer
  # Wait for 25 seconds
  Start-sleep -s 25
  # Remove the installer file
  Remove-Item -recurse 'C:\Temp\npp.8.3.3.Installer.x64.exe'
  # Wait for 2 seconds
  Start-Sleep -s 2
  # Enable the Notepad button
  $Notepad.Enabled = $true
}

# Create a new object of the specified type
$Nmap = New-Object -TypeName $buttons
# Set the location of the Nmap button
$Nmap.Location = New-Object -TypeName $Point -ArgumentList (0,180)
# Set the size of the Nmap button
$Nmap.Size = New-Object -TypeName $Size -ArgumentList (110,30)
# Set the text of the Nmap button
$Nmap.Text = 'Nmap'

$Nmap.Add_Click{
  $Nmap.Enabled = $false
  $source = 'https://nmap.org/dist/nmap-7.92-setup.exe'

  $destination = 'c:\Temp\nmap-7.92-setup.exe'

  #Check if the installer is in the folder. If installer exist, replace it
  If ((Test-Path $destination) -eq $false) {
    New-Item -ItemType File -Path $destination -Force
  } 

  Invoke-WebRequest $source -OutFile $destination
  Start-Process -FilePath 'C:\Temp\nmap-7.92-setup.exe' -ArgumentList '/S','/v','/qn' -Wait
 
  #Delete installer
  Start-sleep -s 25
  Remove-Item -recurse 'C:\Temp\nmap-7.92-setup.exe'
            Start-Sleep -s 2
  $Nmap.Enabled = $true
}






# Create a new button object named AdvancedIP
$AdvancedIP = New-Object -TypeName $buttons

# Set the location of the button object to (0,60)
$AdvancedIP.Location = New-Object -TypeName $Point -ArgumentList (0,60)

# Set the size of the button object to (110,30)
$AdvancedIP.Size = New-Object -TypeName $Size -ArgumentList (110,30)

# Set the text displayed on the button to 'Adv IP Scanner'
$AdvancedIP.Text = 'Adv IP Scanner'

# Add an action to be taken when the button is clicked
$AdvancedIP.Add_Click{

  # Disable the button to prevent multiple clicks
  $AdvancedIP.Enabled = $false

  # Set the source variable to the URL of the software to be downloaded
  $source = 'https://download.advanced-ip-scanner.com/download/files/Advanced_IP_Scanner_2.5.3850.exe'

  # Set the destination variable to the file path where the software will be saved
  $destination = 'c:\temp\Advanced_IP_Scanner_2.5.3850.exe'

  # Check if software is already installed. If installed, display a message and terminate script.
  if ((Test-Path 'c:\Program Files\Advanced IP Scanner') -Or (Test-Path 'C:\Program Files (x86)\Advanced IP Scanner')){
    $console4.text = 'Software already installed' 
    null
  }

  # Check if the installer file exists. If it does not exist, create it.
  If ((Test-Path $destination) -eq $false) {
    New-Item -ItemType File -Path $destination -Force
  } 

  # Download the software using Invoke-WebRequest
  Invoke-WebRequest $source -OutFile $destination

  # Start the software installation process using Start-Process
  Start-Process -FilePath 'C:\temp\Advanced_IP_Scanner_2.5.3850.exe' -ArgumentList '/sp','/verysilent','/SUPPRESSMSGBOXES','/w','/v','/qn','/norestart' -Wait
 
  # Remove the installer file after installation
  Start-sleep -s 25
  Remove-Item -recurse 'C:\temp\Advanced_IP_Scanner_2.5.3850.exe'
  Start-Sleep -s 2

  # Re-enable the button after the installation process has completed
  $AdvancedIP.Enabled = $true
  Start-Sleep -s 2

}


# Create a new object of type 'buttons' and assign it to the variable $NetScan
$NetScan = New-Object -TypeName $buttons

# Set the location of the $NetScan object to a new Point object with coordinates (0,90)
$NetScan.Location = New-Object -TypeName $Point -ArgumentList (0,90)

# Set the size of the $NetScan object to a new Size object with dimensions (110,30)
$NetScan.Size = New-Object -TypeName $Size -ArgumentList (110,30)

# Set the text of the $NetScan object to 'NetScan'
$NetScan.Text = 'NetScan'

# Add a Click event handler to the $NetScan object
$NetScan.Add_Click{

}

# Create a new object of type 'buttons' and assign it to the variable $OWASP
$OWASP = New-Object -TypeName $buttons

# Set the location of the $OWASP object to a new Point object with coordinates (0,120)
$OWASP.Location = New-Object -TypeName $Point -ArgumentList (0,120)

# Set the size of the $OWASP object to a new Size object with dimensions (110,30)
$OWASP.Size = New-Object -TypeName $Size -ArgumentList (110,30)

# Set the text of the $OWASP object to 'OWASP'
$OWASP.Text = 'OWASP'

# Add a Click event handler to the $OWASP object
$OWASP.Add_Click{
  
  # Disable the $OWASP button
  $OWASP.Enabled = $false
  
  # Set the URL of the installer to be downloaded to a string variable named $source
  $source = 'https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2_11_1_windows.exe'

  # Set the path of the installer on the local machine to a string variable named $destination
  $destination = 'c:\Temp\ZAP_2_11_1_windows.exe'

  # Check if the installer file already exists in the specified path, and if not, create it
  If ((Test-Path $destination) -eq $false) {
    New-Item -ItemType File -Path $destination -Force
  } 

  # Download the installer from the specified URL and save it to the specified path
  Invoke-WebRequest $source -OutFile $destination

  # Start the installer process with specified arguments and wait for it to finish
  Start-Process -FilePath 'C:\Temp\ZAP_2_11_1_windows.exe' -ArgumentList '/S','/v','/qn' -Wait

  # Wait for 25 seconds to give the installer enough time to complete
  Start-sleep -s 25
  
  # Remove the installer file and its subdirectories from the specified path
  Remove-Item -recurse 'C:\Temp\ZAP_2_11_1_windows.exe'
  
  # Wait for 2 seconds before enabling the $OWASP button again
  Start-Sleep -s 2
  
  # Enable the $OWASP button
  $OWASP.Enabled = $true
}

$winterminal = New-Object -TypeName $buttons
# Creates a new button object and assigns it to the $winterminal variable
$winterminal.Location = New-Object -TypeName $Point -ArgumentList (0,150)
# Sets the location of the button on the form
$winterminal.Size = New-Object -TypeName $Size -ArgumentList (110,30)
# Sets the size of the button
$winterminal.Text = 'winterminal'
# Sets the text displayed on the button
$winterminal.Add_Click{
  # Adds a Click event handler for the $winterminal button
  $winterminal.Enabled = $false
  # Disables the $winterminal button
  winget install --id=Microsoft.WindowsTerminal -e
  # Installs the Microsoft Windows Terminal package using the winget package manager
  console4.text = "Done."
  # Writes "Done." to the console output
  Start-Sleep -s 2
  # Pauses the script for 2 seconds
  $winterminal.Enabled = $true
  # Enables the $winterminal button
}

# This section creates a new button for installing BleachBit, sets its location and size, adds text to it, and specifies what should happen when it is clicked.
$bb = New-Object -TypeName $buttons
$bb.Location = New-Object -TypeName $Point -ArgumentList (130,180)
$bb.Size = New-Object -TypeName $Size -ArgumentList (110,30)
$bb.Text = 'BleachBit'
$bb.Add_Click{
  # Disable the button
  $bb.Enabled = $false
  # Set the URL for the BleachBit installer and the destination path for the downloaded file
  $source = 'https://m.majorgeeks.com/index.php?ct=files&action=download&'
  $destination = 'c:\Temp\BleachBit-4.4.2-setup.exe'
  # If the installer file does not exist, create it
  If ((Test-Path $destination) -eq $false) {
    New-Item -ItemType File -Path $destination -Force
  }
  # Download the installer file using the specified URL and destination path
  Invoke-WebRequest $source -OutFile $destination
  # Start the BleachBit installer in silent mode and wait for it to finish
  Start-Process -FilePath 'C:\Temp\BleachBit-4.4.2-setup.exe' -ArgumentList '/S','/v','/qn' -Wait
  # Delete the installer file
  Start-sleep -s 25
  Remove-Item -recurse 'C:\Temp\BleachBit-4.4.2-setup.exe'
  Start-Sleep -s 2
  # Enable the button
  $bb.Enabled = $true
}











# This section creates a new button for installing BleachBit, sets its location and size, adds text to it, and specifies what should happen when it is clicked.
$vcredist = New-Object -TypeName $buttons
$vcredist.Location = New-Object -TypeName $Point -ArgumentList (0,210)
$vcredist.Size = New-Object -TypeName $Size -ArgumentList (110,30)
$vcredist.Text = 'vcredist'
$vcredist.Add_Click{
  # Disable the button
  $vcredist.Enabled = $false
  # Set the URL for the BleachBit installer and the destination path for the downloaded file
  $source = 'https://github.com/abbodi1406/vcredist/releases/download/v0.77.0/VisualCppRedist_AIO_x86_x64.exe'
  $destination = 'c:\Temp\VisualCppRedist_AIO_x86_x64.exe'
  # If the installer file does not exist, create it
  If ((Test-Path $destination) -eq $false) {
    New-Item -ItemType File -Path $destination -Force
  }
  # Download the installer file using the specified URL and destination path
  Invoke-WebRequest $source -OutFile $destination
  # Start the BleachBit installer in silent mode and wait for it to finish
  Start-Process -FilePath 'C:\Temp\VisualCppRedist_AIO_x86_x64.exe' -ArgumentList '/S','/v','/qn','/ai' -Wait
  # Delete the installer file
  Start-sleep -s 5
  Remove-Item -recurse 'C:\Temp\VisualCppRedist_AIO_x86_x64.exe'
  Start-Sleep -s 2
  # Enable the button
  $vcredist.Enabled = $true
}

































# This section creates two more buttons for installing power toys and PuTTY respectively, sets their location and size, adds text to them, and specifies what should happen when they are clicked.
$powertoys = New-Object -TypeName $buttons
$powertoys.Location = New-Object -TypeName $Point -ArgumentList (130,150)
$powertoys.Size = New-Object -TypeName $Size -ArgumentList (110,30)
$powertoys.Text = 'powertoys'
$powertoys.Add_Click{
  # Install power toys using winget and update the console4 text with "Done."
  winget install -e Microsoft.PowerToys
  console4.text = "Done."
}

$putty = New-Object -TypeName $buttons
$putty.Location = New-Object -TypeName $Point -ArgumentList (130,120)
$putty.Size = New-Object -TypeName $Size -ArgumentList (110,30)
$putty.Text = 'PuTTy'
$putty.Add_Click{
  # Install PuTTY using winget and update the console4 text with "Done."
  winget install -e PuTTY.PuTTY
  console4.text = "Done."
}

Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;

public class Program {
    public static void Main() {
        Process.Start("cmd.exe");
    }
}
"@

$testbutton = New-Object -TypeName $buttons
$testbutton.Location = New-Object -TypeName $Point -ArgumentList (130, 180)
$testbutton.Size = New-Object -TypeName $Size -ArgumentList (110,31)
$testbutton.Text = "Open CMD"
$testbutton.Add_Click{
  [Program]::Main()
}


# This section creates a text box for console output, sets its location and size, and specifies some properties.
$console4 = New-Object -TypeName $rtb
$console4.Location = New-Object -TypeName $Size -ArgumentList (450,0)
$console4.Size = New-Object -TypeName $Size -ArgumentList (220,330)
$console4.ReadOnly = $true
$console4.Multiline = $true
$console4.ScrollBars = [Windows.Forms.ScrollBars]::Both
$console4.ForeColor = [Drawing.Color]::Black
$console4.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Regular)


$Tab4.Controls.add($console4)
$Tab4.Controls.Add($FormTabControl1)
$Tab5.Controls.add($Cleartempfiles)
$Tab5.Controls.Add($control)
$Tab5.Controls.Add($notice)
$Tab5.Controls.Add($noticetextbox)
$Tab5.Controls.Add($TrackBar)
$Tab5.Controls.Add($valueLabel)
$Tab5.Controls.Add($qos)
$Tab5.Controls.add($chckwsf)
$Tab5.Controls.add($BigTweaks)
$Tab5.Controls.Add($disablelllmnr)
$Tab5.Controls.Add($resetpc)
$Tab5.Controls.Add($GodModeOption)
$Tab5.Controls.Add($rebootuefisettingswindows)
$Tab5.Controls.Add($rebootADVStartup)

$Tab6.Controls.add($testbutton)
$Tab6.Controls.add($Notepad)
$Tab6.Controls.add($checkwinget)
$Tab6.Controls.add($Nmap)
$Tab6.Controls.add($AdvancedIP)
$Tab6.Controls.add($NetScan)
$Tab6.Controls.add($OWASP)
$Tab6.Controls.add($winterminal)
$Tab6.Controls.add($bb)
$Tab6.Controls.add($powertoys)
$Tab6.Controls.Add($putty)
$Tab6.Controls.Add($vcredist)
$Tab5.Controls.Add($ntfsconvert)
$Tab5.Controls.Add($driveselect) 





















































    $adminForm.ShowDialog()














} else {
    
  
  
  
  
  # Get a handle to the console window and hide it
   

    # Non-admin task - adjust this part as needed
    $limitedForm = New-Object System.Windows.Forms.Form
    $limitedForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
    $limitedForm.Text = 'Selection'
    $limitedForm.Topmost = $true
    $limitedForm.MinimumSize = New-Object -TypeName System.Drawing.Size -ArgumentList (600, 350)
    $limitedForm.MaximumSize = New-Object -TypeName System.Drawing.Size -ArgumentList (600, 350)
    $limitedForm.StartPosition = 'CenterScreen'
    $limitedForm.ShowInTaskbar = $false
    $limitedForm.MaximizeBox = $false
    $limitedForm.MinimizeBox = $false
    $limitedForm.Font = New-Object System.Drawing.Font("Times New Roman", 10, [System.Drawing.FontStyle]::Regular)
$base64ImageString = ""
    # Load the image
    $imageBytes = [Convert]::FromBase64String($base64ImageString)
    $ms = New-Object IO.MemoryStream($imageBytes, 0, $imageBytes.Length)
    $ms.Write($imageBytes, 0, $imageBytes.Length)
    $alkanelogo = [System.Drawing.Image]::FromStream($ms, $true)

    # Set the background image
    $limitedForm.BackgroundImage = $alkanelogo
    $limitedForm.BackgroundImageLayout = 'Stretch'
    $limitedForm.SuspendLayout()

    $Icon = [System.Drawing.Icon]::ExtractAssociatedIcon("c:\Windows\System32\UserAccountControlSettings.exe")
    $limitedForm.Icon = $Icon

    # Create a TabControl and add it to the form
    $FormTabControl = New-Object System.Windows.Forms.TabControl
    $FormTabControl.Size = '600,300'
    $FormTabControl.Location = '0,0'
    $limitedForm.Controls.Add($FormTabControl)

    # Create a TabPage (Tab1)
    $Tab1 = New-Object System.Windows.Forms.TabPage
    $Tab1.DataBindings.DefaultDataSourceUpdateMode = 0
    $Tab1.UseVisualStyleBackColor = $true
    $Tab1.Name = 'Tab1'
    $Tab1.Text = 'General Use'
    $FormTabControl.Controls.Add($Tab1)

    # Set the background image for Tab1
    $CurrentTimess = Get-Date -format "yyyy-MM-dd HH:mm:ss"
    $Tab1.BackgroundImage = $alkanelogo
    $Tab1.BackgroundImageLayout = 'Center'

    # Add the console box to Tab1
    $console = New-Object System.Windows.Forms.RichTextBox
    $console.Location = New-Object System.Drawing.Point(364, 0)
    $console.Size = New-Object System.Drawing.Size(220, 300)
    $console.ReadOnly = $true
    $console.Multiline = $true
    $console.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
    $console.ForeColor = [System.Drawing.Color]::Black
    $console.Font = New-Object System.Drawing.Font("Arial", 10, [System.Drawing.FontStyle]::Regular)
    $console.Text = "CURRENT VERSION: $version `n Next Version: 4.0 `n Ignore if you already have $version"
    

    # Add the label to Tab1
    $textboxlabel = New-Object System.Windows.Forms.Label
    $textboxlabel.Text = $CurrentTimess
    $textboxlabel.Location = New-Object System.Drawing.Point(10, 10)
    $textboxlabel.Size = New-Object System.Drawing.Size(100, 45)
    

    # Add an input textbox to Tab1
    $theTbox = New-Object System.Windows.Forms.TextBox
    $theTbox.Text = 'Enter URL Here/IP'
    $theTbox.Location = New-Object System.Drawing.Point(0, 50)
    $theTbox.Size = New-Object System.Drawing.Size(100, 20)
    
# Button for NSLOOKUP
$Go_button = New-Object System.Windows.Forms.Button
$Go_button.Text = 'NSLOOKUP Start'
$nslookup2 = New-Object System.Windows.Forms.ToolTip
$nslookup1 = "Performs an NSLOOKUP with the IP you provided above"
$nslookup2.SetToolTip($Go_button, $nslookup1)
$Go_button.add_MouseHover({ $nslookup1 })
$Go_button.Location = New-Object -TypeName System.Drawing.Point(0, 80)
$Go_button.Size = New-Object -TypeName System.Drawing.Size(110, 30)
$Go_button.add_click{ Resolve-DnsName -Name $theTbox.Text | Out-GridView }

# Button for ipconfig
$ipconf_button = New-Object System.Windows.Forms.Button
$ipconf_button.Text = 'ipconfig'
$ipconfigtooltip1 = New-Object System.Windows.Forms.ToolTip
$ipconfigtooltip = "Shows your PC DNS, IPv6, IPv4, subnet, and other information"
$ipconfigtooltip1.SetToolTip($ipconf_button, $ipconfigtooltip)
$ipconf_button.add_MouseHover({ $ipconfigtooltip })
$ipconf_button.Location = New-Object -TypeName System.Drawing.Point(0, 200)
$ipconf_button.Size = New-Object -TypeName System.Drawing.Size(110, 30)
$ipconf_button.add_click{
    $ipconf_button.Enabled = $false
    $console.Text = & "$env:windir\system32\ipconfig.exe" /all | Out-String
    Start-Sleep -Milliseconds 1500
    $ipconf_button.Enabled = $true
}

# Button for DisplayDNS
$tracerts_button = New-Object System.Windows.Forms.Button
$tracerts_button.Text = 'DisplayDNS'
$tracerts_button.Location = New-Object -TypeName System.Drawing.Point(0, 110)
$tracerts_button.Size = New-Object -TypeName System.Drawing.Size(110, 30)
$tracerts_button.add_click{
    Get-DnsclientCache | Format-Table -Property Entry, RecordName, RecordStatusType, Section, TimeToLive, DataLength, Data -AutoSize | Out-String
    $P = Get-DnsclientCache
    $P | Out-GridView
}

# Button for TraceRoute
$tracert_button = New-Object System.Windows.Forms.Button
$tracert_button.Text = 'TraceRoute'
$tracert_button.Location = New-Object -TypeName System.Drawing.Point(0, 140)
$tracert_button.Size = New-Object -TypeName System.Drawing.Size(110, 30)
$tracert_button.add_click{
    Start-Sleep -Seconds 45
    Test-NetConnection -ComputerName $theTbox.Text -Traceroute -Hops 2
    Start-Sleep -Seconds 45
}


$tcpipjob =
{
  # Define path to netsh.exe command line tool
  $cleardns = "$env:windir\system32\netsh.exe"
  
  # Update the console to display a message
  $console.Text = 'Please wait..'
  
  # Reset Winsock Catalog
  & $cleardns winsock reset catalog | Out-String
  
  # Reset IPv4 settings
  & $cleardns interface ipv4 reset| Out-String
  
  # Reset IPv6 settings
  & $cleardns interface ipv6 reset| Out-String
  
  # Clear ARP cache
  & "$env:windir\system32\arp.exe" d
  
  # Reset Winsock
  & $cleardns winsock reset| Out-String
  
  # Reset TCP/IP settings
  & $cleardns int tcp reset| Out-String
  
  # Reset IP settings
  & $cleardns int ip reset| Out-String
  
  # Delete neighbor cache
  & $cleardns int ip delete neighbors| Out-String
  
  # Delete destination cache
  & $cleardns int ip delete destinationcache| Out-String
  
  # Delete ARP cache
  & $cleardns int ip delete arpcache| Out-String
  
  # Flush DNS cache
  & "$env:windir\system32\ipconfig.exe" /flushDNS| Out-String
  
  # Register DNS
  & "$env:windir\system32\ipconfig.exe" /registerDNS| Out-String
  
  # Display DNS cache
  & "$env:windir\system32\ipconfig.exe" /displayDNS| Out-String
  
  # Release IPv6 lease
  & "$env:windir\system32\ipconfig.exe" /release6| Out-String
  
  # Renew IPv6 lease
  & "$env:windir\system32\ipconfig.exe" /renew6| Out-String
  
  # Clear NetBIOS cache
  & "$env:windir\system32\nbtstat.exe" -R| Out-String
  
  # Reload NetBIOS names
  & "$env:windir\system32\nbtstat.exe" -RR| Out-String
  
  # Update the console to display a message
  $console.Text = 'Done.'| Out-String
  
  # Display DNS cache and network settings
  $console.Lines += & "$env:windir\system32\ipconfig.exe" /displaydns | Out-String
  $console.Lines += & "$env:windir\system32\ipconfig.exe" /all | Out-String
}

# Create a button to trigger the TCP/IP stack reset
$tcpipstack_button = New-Object System.Windows.Forms.Button
$tcpipstack_button.text = 'Clear TCP/IP Stack'
$tooltip122 = New-Object System.Windows.Forms.ToolTip
$tipMigrate222 = "Have network issues? click this button and wait till its done, then restart your PC"
$tooltip122.SetToolTip($tcpipstack_button, $tipMigrate222)
$tcpipstack_button.add_MouseHover({ $tooltip122 })
$tcpipstack_button.location = New-Object -TypeName System.Drawing.Point (120,140) 
$tcpipstack_button.size = New-Object -TypeName System.Drawing.Size (110,30)

# When the button is clicked, start the TCP/IP stack reset job and update the console
$tcpipstack_button.add_click{
  $console

  $console.text = "starting..."
  
  $tcpipstack_button.Enabled = $false  # Disable the button
  $jobby = Start-Job -ScriptBlock $tcpipjob  # Start the job that executes the TCP/IP reset function
  Do {[System.Windows.Forms.Application]::DoEvents()} Until ($jobby.State -eq 'Completed')  # Wait for the job to complete
  $console.Text = Get-Job | Receive-Job  # Retrieve the output from the job and display it in the console
  $tcpipstack_button.Enabled = $true  # Re-enable the button
}


    $Tab1.Controls.Add($theTbox)
    $Tab1.Controls.Add($textboxlabel)
    $Tab1.Controls.Add($console)
    $Tab1.Controls.Add($tracert_button)
    $Tab1.Controls.Add($tracerts_button)
    $Tab1.Controls.Add($ipconf_button)
    $Tab1.Controls.Add($Go_button)
    $Tab1.Controls.Add($tcpipstack_button)


    # Define a handler for the FormClosed event to remove all event handlers
    $limitedForm.add_FormClosed({
      $Go_button.remove_click()
      $ipconf_button.remove_click()
      $tracerts_button.remove_click()
      $tracert_button.remove_click()
      $tcpipstack_button.remove_click()
      $limitedForm.Dispose()
  })

  $limitedForm.ShowDialog()
}

